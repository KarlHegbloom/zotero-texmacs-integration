#!/usr/bin/guile-2.0 \
-e main -s
!#

(use-modules (ice-9 receive))
(use-modules (ice-9 rdelim))
(use-modules (rnrs bytevectors))
(use-modules (rnrs io ports)) ;; open-bytevector-input-port
;; (use-modules (web client))
;; (use-modules (web uri))
;; (use-modules (web request))
;; (use-modules (web response))
(use-modules (json))

;; (use-modules (bb-cayw))

;;;; Protocol between tm_zotero and TeXmacs:
;; input
(define DATA_COMMAND #\dle)
(define DATA_ESCAPE #\esc)
;; output
(define DATA_BEGIN #\stx)
(define DATA_END #\enq)

;; tm_zotero -> TeXmacs
(define (verbatim-data-begin)
  (display DATA_BEGIN)
  (display "verbatim:"))

;; tm_zotero -> TeXmacs
(define (command-data-begin)
  (display DATA_BEGIN)
  (display "command:"))

;; tm_zotero -> TeXmacs
(define (scheme-data-begin)
  (display DATA_BEGIN)
  (display "scheme:"))

;; tm_zotero -> TeXmacs
(define (latex-data-begin)
  (display DATA_BEGIN)
  (display "latex:"))

;; tm_zotero -> TeXmacs
(define (html-data-begin)
  (display DATA_BEGIN)
  (display "html:"))

;; tm_zotero -> TeXmacs
;; TeXmacs -> tm_zotero
(define (data-end)
  (display DATA_END))

;;;; Protocol between tm_zotero and ZoteroTeXmacsIntegration.js
;;
;; https://www.zotero.org/support/dev/client_coding/libreoffice_plugin_wire_protocol
;;
;; The Firefox or Zotero Standalone process operates a server on port
;; 23117, which the extension residing within TeXmacs connects to. All
;; frames consist of a 32 bits specifying the transaction ID, a
;; big-endian 32-bit integer specifying the length of the payload, and
;; the payload itself, which is either UTF-8 encoded JSON or an
;; unescaped string beginning with “ERR:”.
;;
;; Base:
;;


;; Integration commands: TeXmacs -> tm_zotero -> ZoteroTeXmacsIntegration.js
;;
;; addCitation 
;; editCitation
;; addBibliography
;; editBibliography
;; refresh
;; removeCodes
;; setDocPrefs


(define DIALOG_ICON_STOP 0)
(define DIALOG_ICON_NOTICE 1)
(define DIALOG_ICON_CAUTION 2)

(define DIALOG_BUTTONS_OK 0)
(define DIALOG_BUTTONS_OK_OK_PRESSED 1)

(define DIALOG_BUTTONS_OK_CANCEL 1)
(define DIALOG_BUTTONS_OK_CANCEL_CANCEL_PRESSED 0)
(define DIALOG_BUTTONS_OK_CANCEL_OK_PRESSED 1)

(define DIALOG_BUTTONS_YES_NO 2)
(define DIALOG_BUTTONS_YES_NO_NO_PRESSED 0)
(define DIALOG_BUTTONS_YES_NO_YES_PRESSED 1)

(define DIALOG_BUTTONS_YES_NO_CANCEL 3)
(define DIALOG_BUTTONS_YES_NO_CANCEL_CANCEL_PRESSED 0)
(define DIALOG_BUTTONS_YES_NO_CANCEL_NO_PRESSED 1)
(define DIALOG_BUTTONS_YES_NO_CANCEL_YES_PRESSED 2)

;;
;; Word Processor commands: ZoteroTeXmacsIntegration.js -> tm_zotero -> TeXmacs
;;
;; Each returns: [CommandName, [Parameters,...]] OR
;;               ERR:(Error string goes here)
;;

;; Gets information about the client and the currently active
;; document. documentID can be an integer or a string.
;;
;; ["Application_getActiveDocument", [int_protocolVersion]] -> [int_protocolVersion, documentID]



;; Shows an alert.
;;
;; ["Document_displayAlert", [documentID, str_dialogText, int_icon, int_buttons]] -> int_button_pressed



;; Brings the document to the foreground. (For OpenOffice, this is a no-op on non-Mac systems.)
;;
;; ["Document_activate", [documentID]] -> null



;; Indicates whether a field can be inserted at the current cursor position.
;;
;; ["Document_canInsertField", [documentID]] -> boolean



;; Stores a document-specific persistent data string. This data
;; contains the style ID and other user preferences.
;;
;; ["Document_setDocumentData", [documentID, str_dataString]] -> null



;; Retrieves data string set by setDocumentData.
;;
;; ["Document_getDocumentData", [documentID]] -> str_dataString



;; Indicates whether the cursor is in a given field. If it is, returns
;; information about that field. Returns null, indicating that the
;; cursor isn't in a field, or an array:
;;
;; fieldID, int or string, A unique identifier corresponding to this
;; field fieldCode, int or string, The code stored within this field
;; noteIndex, int, The number of the footnote in which this field
;;                 resides, or 0 if the field is not in a footnote.
;;
;; ["Document_cursorInField", [documentID, str_fieldType]] -> null || [fieldID, fieldCode, int_noteIndex]



(define NOTE_IN_TEXT 0)
(define NOTE_FOOTNOTE 1)
(define NOTE_ENDNOTE 2)

;; Inserts a new field at the current cursor position.
;;
;; str_fieldType, either "ReferenceMark" or "Bookmark"
;; int_noteType, NOTE_IN_TEXT, NOTE_FOOTNOTE, or NOTE_ENDNOTE
;;
;; ["Document_insertField", [documentID, str_fieldType, int_noteType]] -> [fieldID, fieldCode, int_noteIndex]



;; Get all fields present in the document, in document order.
;;
;; str_fieldType is the type of field used by the document, either ReferenceMark or Bookmark
;;
;; ["Document_getFields", [documentID, str_fieldType]] -> [[fieldID, ...], [fieldCode, ...], [noteIndex, ...]]



;; ["Document_convert" ??? (TODO in documentation.)



;; ["Document_setBibliographyStyle", ??? (TODO)



;; Indicates that the given documentID will no longer be used and
;; associated resources may be freed.
;;
;; ["Document_complete", [documentID]] -> null



;; Deletes a field from the document (both its code and its contents).
;;
;; fieldID as originally returned by Document_cursorInField,
;; Document_insertField, or Document_getFields.
;;
;; ["Field_delete", [documentID, fieldID]] -> null



;; Moves the current cursor position to encompass a field.
;;
;; ["Field_select", [documentID, fieldID]] -> null



;; Removes the field code from a field, leaving it as plain text.
;;
;; ["Field_removeCode", [documentID, fieldID]] -> null



;; Sets the (visible) text of a field.
;;
;; ["Field_setText", [documentID, fieldID, str_text, isRich]] -> null



;; Gets the (visible) text of a field.
;;
;; ["Field_getText", [documentID, fieldID]] -> str_text



;; Sets the (hidden, persistent) code of a field.
;;
;; ["Field_setCode", [documentID, fieldID, str_code]] -> null



;; Converts a field from one type to another.
;;
;; ["Field_convert", [documentID, fieldID, str_fieldType, int_noteType]] -> null



;;; Main Program
(define (main args)
  )


;;; Local Variables:
;;; mode: scheme
;;; geiser-scheme-implementation: guile
;;; End:
